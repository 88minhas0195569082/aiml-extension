// Auto-generated by AI/ML extension, do not modify

/***************************************************************************/ /**
 * @file sl_ml_model_{{ model_name }}.h
 * @brief Top level functions and structures for initializing and executing a
 * machine learning model with tensorflow lite micro
 *******************************************************************************
 * # License
 * <b>Copyright 2025 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

#pragma once

#include "sl_status.h"
#include "{{ model_name }}_generated.h"
#include "tflite_micro_model_config.h"

using namespace npu_toolkit;

static TfliteMicroModel {{ model_name | lower }}_model;
static sl_status_t {{ model_name | lower }}_model_status;

uint8_t* {{ model_name | lower }}_model_flatbuffer = npu_toolkit_model;
const int {{ model_name | lower }}_model_flatbuffer_length = npu_toolkit_model_length;

sl_status_t slx_ml_{{ model_name | lower }}_model_init(void) {
  {{ model_name | lower }}_model_status = load_tflite_micro_model({{ model_name | lower }}_model) ? SL_STATUS_OK : SL_STATUS_FAIL;
  return {{ model_name | lower }}_model_status;
}

sl_status_t slx_ml_{{ model_name | lower }}_model_run(void) {
  if ({{ model_name | lower }}_model_status != SL_STATUS_OK) {
    return SL_STATUS_FAIL;
  }

  {{ model_name | lower }}_model_status = {{ model_name | lower }}_model.invoke() ? SL_STATUS_OK : SL_STATUS_FAIL;
  return {{ model_name | lower }}_model_status;
}
